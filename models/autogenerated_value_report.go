package models

import (
	"fmt"

	"github.com/jinzhu/gorm"
)

// ===== BEGIN of all query sets

// ===== BEGIN of query set ValueReportQuerySet

// ValueReportQuerySet is an queryset type for ValueReport
type ValueReportQuerySet struct {
	db *gorm.DB
}

// NewValueReportQuerySet constructs new ValueReportQuerySet
func NewValueReportQuerySet(db *gorm.DB) ValueReportQuerySet {
	return ValueReportQuerySet{
		db: db.Model(&ValueReport{}),
	}
}

func (qs ValueReportQuerySet) w(db *gorm.DB) ValueReportQuerySet {
	return NewValueReportQuerySet(db)
}

// All is an autogenerated method
// nolint: dupl
func (qs ValueReportQuerySet) All(ret *[]ValueReport) error {
	return qs.db.Find(ret).Error
}

// Count is an autogenerated method
// nolint: dupl
func (qs ValueReportQuerySet) Count() (int, error) {
	var count int
	err := qs.db.Count(&count).Error
	return count, err
}

// Create is an autogenerated method
// nolint: dupl
func (o *ValueReport) Create(db *gorm.DB) error {
	return db.Create(o).Error
}

// Delete is an autogenerated method
// nolint: dupl
func (o *ValueReport) Delete(db *gorm.DB) error {
	return db.Delete(o).Error
}

// Delete is an autogenerated method
// nolint: dupl
func (qs ValueReportQuerySet) Delete() error {
	return qs.db.Delete(ValueReport{}).Error
}

// GetUpdater is an autogenerated method
// nolint: dupl
func (qs ValueReportQuerySet) GetUpdater() ValueReportUpdater {
	return NewValueReportUpdater(qs.db)
}

// Limit is an autogenerated method
// nolint: dupl
func (qs ValueReportQuerySet) Limit(limit int) ValueReportQuerySet {
	return qs.w(qs.db.Limit(limit))
}

// One is used to retrieve one result. It returns gorm.ErrRecordNotFound
// if nothing was fetched
func (qs ValueReportQuerySet) One(ret *ValueReport) error {
	return qs.db.First(ret).Error
}

// OrderAscBySKUCount is an autogenerated method
// nolint: dupl
func (qs ValueReportQuerySet) OrderAscBySKUCount() ValueReportQuerySet {
	return qs.w(qs.db.Order("sku_count ASC"))
}

// OrderAscByStockCount is an autogenerated method
// nolint: dupl
func (qs ValueReportQuerySet) OrderAscByStockCount() ValueReportQuerySet {
	return qs.w(qs.db.Order("stock_count ASC"))
}

// OrderAscByTotalStockCount is an autogenerated method
// nolint: dupl
func (qs ValueReportQuerySet) OrderAscByTotalStockCount() ValueReportQuerySet {
	return qs.w(qs.db.Order("total_stock_count ASC"))
}

// OrderDescBySKUCount is an autogenerated method
// nolint: dupl
func (qs ValueReportQuerySet) OrderDescBySKUCount() ValueReportQuerySet {
	return qs.w(qs.db.Order("sku_count DESC"))
}

// OrderDescByStockCount is an autogenerated method
// nolint: dupl
func (qs ValueReportQuerySet) OrderDescByStockCount() ValueReportQuerySet {
	return qs.w(qs.db.Order("stock_count DESC"))
}

// OrderDescByTotalStockCount is an autogenerated method
// nolint: dupl
func (qs ValueReportQuerySet) OrderDescByTotalStockCount() ValueReportQuerySet {
	return qs.w(qs.db.Order("total_stock_count DESC"))
}

// SKUCountEq is an autogenerated method
// nolint: dupl
func (qs ValueReportQuerySet) SKUCountEq(sKUCount uint) ValueReportQuerySet {
	return qs.w(qs.db.Where("sku_count = ?", sKUCount))
}

// SKUCountGt is an autogenerated method
// nolint: dupl
func (qs ValueReportQuerySet) SKUCountGt(sKUCount uint) ValueReportQuerySet {
	return qs.w(qs.db.Where("sku_count > ?", sKUCount))
}

// SKUCountGte is an autogenerated method
// nolint: dupl
func (qs ValueReportQuerySet) SKUCountGte(sKUCount uint) ValueReportQuerySet {
	return qs.w(qs.db.Where("sku_count >= ?", sKUCount))
}

// SKUCountIn is an autogenerated method
// nolint: dupl
func (qs ValueReportQuerySet) SKUCountIn(sKUCount uint, sKUCountRest ...uint) ValueReportQuerySet {
	iArgs := []interface{}{sKUCount}
	for _, arg := range sKUCountRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("sku_count IN (?)", iArgs))
}

// SKUCountLt is an autogenerated method
// nolint: dupl
func (qs ValueReportQuerySet) SKUCountLt(sKUCount uint) ValueReportQuerySet {
	return qs.w(qs.db.Where("sku_count < ?", sKUCount))
}

// SKUCountLte is an autogenerated method
// nolint: dupl
func (qs ValueReportQuerySet) SKUCountLte(sKUCount uint) ValueReportQuerySet {
	return qs.w(qs.db.Where("sku_count <= ?", sKUCount))
}

// SKUCountNe is an autogenerated method
// nolint: dupl
func (qs ValueReportQuerySet) SKUCountNe(sKUCount uint) ValueReportQuerySet {
	return qs.w(qs.db.Where("sku_count != ?", sKUCount))
}

// SKUCountNotIn is an autogenerated method
// nolint: dupl
func (qs ValueReportQuerySet) SKUCountNotIn(sKUCount uint, sKUCountRest ...uint) ValueReportQuerySet {
	iArgs := []interface{}{sKUCount}
	for _, arg := range sKUCountRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("sku_count NOT IN (?)", iArgs))
}

// SetSKUCount is an autogenerated method
// nolint: dupl
func (u ValueReportUpdater) SetSKUCount(sKUCount uint) ValueReportUpdater {
	u.fields[string(ValueReportDBSchema.SKUCount)] = sKUCount
	return u
}

// SetStockCount is an autogenerated method
// nolint: dupl
func (u ValueReportUpdater) SetStockCount(stockCount uint) ValueReportUpdater {
	u.fields[string(ValueReportDBSchema.StockCount)] = stockCount
	return u
}

// SetTotalStockCount is an autogenerated method
// nolint: dupl
func (u ValueReportUpdater) SetTotalStockCount(totalStockCount uint) ValueReportUpdater {
	u.fields[string(ValueReportDBSchema.TotalStockCount)] = totalStockCount
	return u
}

// StockCountEq is an autogenerated method
// nolint: dupl
func (qs ValueReportQuerySet) StockCountEq(stockCount uint) ValueReportQuerySet {
	return qs.w(qs.db.Where("stock_count = ?", stockCount))
}

// StockCountGt is an autogenerated method
// nolint: dupl
func (qs ValueReportQuerySet) StockCountGt(stockCount uint) ValueReportQuerySet {
	return qs.w(qs.db.Where("stock_count > ?", stockCount))
}

// StockCountGte is an autogenerated method
// nolint: dupl
func (qs ValueReportQuerySet) StockCountGte(stockCount uint) ValueReportQuerySet {
	return qs.w(qs.db.Where("stock_count >= ?", stockCount))
}

// StockCountIn is an autogenerated method
// nolint: dupl
func (qs ValueReportQuerySet) StockCountIn(stockCount uint, stockCountRest ...uint) ValueReportQuerySet {
	iArgs := []interface{}{stockCount}
	for _, arg := range stockCountRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("stock_count IN (?)", iArgs))
}

// StockCountLt is an autogenerated method
// nolint: dupl
func (qs ValueReportQuerySet) StockCountLt(stockCount uint) ValueReportQuerySet {
	return qs.w(qs.db.Where("stock_count < ?", stockCount))
}

// StockCountLte is an autogenerated method
// nolint: dupl
func (qs ValueReportQuerySet) StockCountLte(stockCount uint) ValueReportQuerySet {
	return qs.w(qs.db.Where("stock_count <= ?", stockCount))
}

// StockCountNe is an autogenerated method
// nolint: dupl
func (qs ValueReportQuerySet) StockCountNe(stockCount uint) ValueReportQuerySet {
	return qs.w(qs.db.Where("stock_count != ?", stockCount))
}

// StockCountNotIn is an autogenerated method
// nolint: dupl
func (qs ValueReportQuerySet) StockCountNotIn(stockCount uint, stockCountRest ...uint) ValueReportQuerySet {
	iArgs := []interface{}{stockCount}
	for _, arg := range stockCountRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("stock_count NOT IN (?)", iArgs))
}

// TotalStockCountEq is an autogenerated method
// nolint: dupl
func (qs ValueReportQuerySet) TotalStockCountEq(totalStockCount uint) ValueReportQuerySet {
	return qs.w(qs.db.Where("total_stock_count = ?", totalStockCount))
}

// TotalStockCountGt is an autogenerated method
// nolint: dupl
func (qs ValueReportQuerySet) TotalStockCountGt(totalStockCount uint) ValueReportQuerySet {
	return qs.w(qs.db.Where("total_stock_count > ?", totalStockCount))
}

// TotalStockCountGte is an autogenerated method
// nolint: dupl
func (qs ValueReportQuerySet) TotalStockCountGte(totalStockCount uint) ValueReportQuerySet {
	return qs.w(qs.db.Where("total_stock_count >= ?", totalStockCount))
}

// TotalStockCountIn is an autogenerated method
// nolint: dupl
func (qs ValueReportQuerySet) TotalStockCountIn(totalStockCount uint, totalStockCountRest ...uint) ValueReportQuerySet {
	iArgs := []interface{}{totalStockCount}
	for _, arg := range totalStockCountRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("total_stock_count IN (?)", iArgs))
}

// TotalStockCountLt is an autogenerated method
// nolint: dupl
func (qs ValueReportQuerySet) TotalStockCountLt(totalStockCount uint) ValueReportQuerySet {
	return qs.w(qs.db.Where("total_stock_count < ?", totalStockCount))
}

// TotalStockCountLte is an autogenerated method
// nolint: dupl
func (qs ValueReportQuerySet) TotalStockCountLte(totalStockCount uint) ValueReportQuerySet {
	return qs.w(qs.db.Where("total_stock_count <= ?", totalStockCount))
}

// TotalStockCountNe is an autogenerated method
// nolint: dupl
func (qs ValueReportQuerySet) TotalStockCountNe(totalStockCount uint) ValueReportQuerySet {
	return qs.w(qs.db.Where("total_stock_count != ?", totalStockCount))
}

// TotalStockCountNotIn is an autogenerated method
// nolint: dupl
func (qs ValueReportQuerySet) TotalStockCountNotIn(totalStockCount uint, totalStockCountRest ...uint) ValueReportQuerySet {
	iArgs := []interface{}{totalStockCount}
	for _, arg := range totalStockCountRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("total_stock_count NOT IN (?)", iArgs))
}

// Update is an autogenerated method
// nolint: dupl
func (u ValueReportUpdater) Update() error {
	return u.db.Updates(u.fields).Error
}

// UpdateNum is an autogenerated method
// nolint: dupl
func (u ValueReportUpdater) UpdateNum() (int64, error) {
	db := u.db.Updates(u.fields)
	return db.RowsAffected, db.Error
}

// ===== END of query set ValueReportQuerySet

// ===== BEGIN of ValueReport modifiers

type valueReportDBSchemaField string

func (f valueReportDBSchemaField) String() string {
	return string(f)
}

// ValueReportDBSchema stores db field names of ValueReport
var ValueReportDBSchema = struct {
	SKUCount        valueReportDBSchemaField
	StockCount      valueReportDBSchemaField
	TotalStockCount valueReportDBSchemaField
}{

	SKUCount:        valueReportDBSchemaField("sku_count"),
	StockCount:      valueReportDBSchemaField("stock_count"),
	TotalStockCount: valueReportDBSchemaField("total_stock_count"),
}

// Update updates ValueReport fields by primary key
func (o *ValueReport) Update(db *gorm.DB, fields ...valueReportDBSchemaField) error {
	dbNameToFieldName := map[string]interface{}{
		"sku_count":         o.SKUCount,
		"stock_count":       o.StockCount,
		"total_stock_count": o.TotalStockCount,
	}
	u := map[string]interface{}{}
	for _, f := range fields {
		fs := f.String()
		u[fs] = dbNameToFieldName[fs]
	}
	if err := db.Model(o).Updates(u).Error; err != nil {
		if err == gorm.ErrRecordNotFound {
			return err
		}

		return fmt.Errorf("can't update ValueReport %v fields %v: %s",
			o, fields, err)
	}

	return nil
}

// ValueReportUpdater is an ValueReport updates manager
type ValueReportUpdater struct {
	fields map[string]interface{}
	db     *gorm.DB
}

// NewValueReportUpdater creates new ValueReport updater
func NewValueReportUpdater(db *gorm.DB) ValueReportUpdater {
	return ValueReportUpdater{
		fields: map[string]interface{}{},
		db:     db.Model(&ValueReport{}),
	}
}

// ===== END of ValueReport modifiers

// ===== END of all query sets
