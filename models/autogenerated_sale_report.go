package models

import (
	"fmt"
	"time"

	"github.com/jinzhu/gorm"
)

// ===== BEGIN of all query sets

// ===== BEGIN of query set SaleReportQuerySet

// SaleReportQuerySet is an queryset type for SaleReport
type SaleReportQuerySet struct {
	db *gorm.DB
}

// NewSaleReportQuerySet constructs new SaleReportQuerySet
func NewSaleReportQuerySet(db *gorm.DB) SaleReportQuerySet {
	return SaleReportQuerySet{
		db: db.Model(&SaleReport{}),
	}
}

func (qs SaleReportQuerySet) w(db *gorm.DB) SaleReportQuerySet {
	return NewSaleReportQuerySet(db)
}

// All is an autogenerated method
// nolint: dupl
func (qs SaleReportQuerySet) All(ret *[]SaleReport) error {
	return qs.db.Find(ret).Error
}

// Count is an autogenerated method
// nolint: dupl
func (qs SaleReportQuerySet) Count() (int, error) {
	var count int
	err := qs.db.Count(&count).Error
	return count, err
}

// Create is an autogenerated method
// nolint: dupl
func (o *SaleReport) Create(db *gorm.DB) error {
	return db.Create(o).Error
}

// Delete is an autogenerated method
// nolint: dupl
func (o *SaleReport) Delete(db *gorm.DB) error {
	return db.Delete(o).Error
}

// Delete is an autogenerated method
// nolint: dupl
func (qs SaleReportQuerySet) Delete() error {
	return qs.db.Delete(SaleReport{}).Error
}

// FromDateEq is an autogenerated method
// nolint: dupl
func (qs SaleReportQuerySet) FromDateEq(fromDate time.Time) SaleReportQuerySet {
	return qs.w(qs.db.Where("from_date = ?", fromDate))
}

// FromDateGt is an autogenerated method
// nolint: dupl
func (qs SaleReportQuerySet) FromDateGt(fromDate time.Time) SaleReportQuerySet {
	return qs.w(qs.db.Where("from_date > ?", fromDate))
}

// FromDateGte is an autogenerated method
// nolint: dupl
func (qs SaleReportQuerySet) FromDateGte(fromDate time.Time) SaleReportQuerySet {
	return qs.w(qs.db.Where("from_date >= ?", fromDate))
}

// FromDateIsNotNull is an autogenerated method
// nolint: dupl
func (qs SaleReportQuerySet) FromDateIsNotNull() SaleReportQuerySet {
	return qs.w(qs.db.Where("from_date IS NOT NULL"))
}

// FromDateIsNull is an autogenerated method
// nolint: dupl
func (qs SaleReportQuerySet) FromDateIsNull() SaleReportQuerySet {
	return qs.w(qs.db.Where("from_date IS NULL"))
}

// FromDateLt is an autogenerated method
// nolint: dupl
func (qs SaleReportQuerySet) FromDateLt(fromDate time.Time) SaleReportQuerySet {
	return qs.w(qs.db.Where("from_date < ?", fromDate))
}

// FromDateLte is an autogenerated method
// nolint: dupl
func (qs SaleReportQuerySet) FromDateLte(fromDate time.Time) SaleReportQuerySet {
	return qs.w(qs.db.Where("from_date <= ?", fromDate))
}

// FromDateNe is an autogenerated method
// nolint: dupl
func (qs SaleReportQuerySet) FromDateNe(fromDate time.Time) SaleReportQuerySet {
	return qs.w(qs.db.Where("from_date != ?", fromDate))
}

// GetUpdater is an autogenerated method
// nolint: dupl
func (qs SaleReportQuerySet) GetUpdater() SaleReportUpdater {
	return NewSaleReportUpdater(qs.db)
}

// Limit is an autogenerated method
// nolint: dupl
func (qs SaleReportQuerySet) Limit(limit int) SaleReportQuerySet {
	return qs.w(qs.db.Limit(limit))
}

// One is used to retrieve one result. It returns gorm.ErrRecordNotFound
// if nothing was fetched
func (qs SaleReportQuerySet) One(ret *SaleReport) error {
	return qs.db.First(ret).Error
}

// OrderAscByFromDate is an autogenerated method
// nolint: dupl
func (qs SaleReportQuerySet) OrderAscByFromDate() SaleReportQuerySet {
	return qs.w(qs.db.Order("from_date ASC"))
}

// OrderAscByToDate is an autogenerated method
// nolint: dupl
func (qs SaleReportQuerySet) OrderAscByToDate() SaleReportQuerySet {
	return qs.w(qs.db.Order("to_date ASC"))
}

// OrderAscByTotalProfit is an autogenerated method
// nolint: dupl
func (qs SaleReportQuerySet) OrderAscByTotalProfit() SaleReportQuerySet {
	return qs.w(qs.db.Order("total_profit ASC"))
}

// OrderAscByTotalRevenue is an autogenerated method
// nolint: dupl
func (qs SaleReportQuerySet) OrderAscByTotalRevenue() SaleReportQuerySet {
	return qs.w(qs.db.Order("total_revenue ASC"))
}

// OrderAscByTotalSale is an autogenerated method
// nolint: dupl
func (qs SaleReportQuerySet) OrderAscByTotalSale() SaleReportQuerySet {
	return qs.w(qs.db.Order("total_sale ASC"))
}

// OrderAscByTotalStock is an autogenerated method
// nolint: dupl
func (qs SaleReportQuerySet) OrderAscByTotalStock() SaleReportQuerySet {
	return qs.w(qs.db.Order("total_stock ASC"))
}

// OrderDescByFromDate is an autogenerated method
// nolint: dupl
func (qs SaleReportQuerySet) OrderDescByFromDate() SaleReportQuerySet {
	return qs.w(qs.db.Order("from_date DESC"))
}

// OrderDescByToDate is an autogenerated method
// nolint: dupl
func (qs SaleReportQuerySet) OrderDescByToDate() SaleReportQuerySet {
	return qs.w(qs.db.Order("to_date DESC"))
}

// OrderDescByTotalProfit is an autogenerated method
// nolint: dupl
func (qs SaleReportQuerySet) OrderDescByTotalProfit() SaleReportQuerySet {
	return qs.w(qs.db.Order("total_profit DESC"))
}

// OrderDescByTotalRevenue is an autogenerated method
// nolint: dupl
func (qs SaleReportQuerySet) OrderDescByTotalRevenue() SaleReportQuerySet {
	return qs.w(qs.db.Order("total_revenue DESC"))
}

// OrderDescByTotalSale is an autogenerated method
// nolint: dupl
func (qs SaleReportQuerySet) OrderDescByTotalSale() SaleReportQuerySet {
	return qs.w(qs.db.Order("total_sale DESC"))
}

// OrderDescByTotalStock is an autogenerated method
// nolint: dupl
func (qs SaleReportQuerySet) OrderDescByTotalStock() SaleReportQuerySet {
	return qs.w(qs.db.Order("total_stock DESC"))
}

// SetFromDate is an autogenerated method
// nolint: dupl
func (u SaleReportUpdater) SetFromDate(fromDate *time.Time) SaleReportUpdater {
	u.fields[string(SaleReportDBSchema.FromDate)] = fromDate
	return u
}

// SetToDate is an autogenerated method
// nolint: dupl
func (u SaleReportUpdater) SetToDate(toDate *time.Time) SaleReportUpdater {
	u.fields[string(SaleReportDBSchema.ToDate)] = toDate
	return u
}

// SetTotalProfit is an autogenerated method
// nolint: dupl
func (u SaleReportUpdater) SetTotalProfit(totalProfit uint) SaleReportUpdater {
	u.fields[string(SaleReportDBSchema.TotalProfit)] = totalProfit
	return u
}

// SetTotalRevenue is an autogenerated method
// nolint: dupl
func (u SaleReportUpdater) SetTotalRevenue(totalRevenue uint) SaleReportUpdater {
	u.fields[string(SaleReportDBSchema.TotalRevenue)] = totalRevenue
	return u
}

// SetTotalSale is an autogenerated method
// nolint: dupl
func (u SaleReportUpdater) SetTotalSale(totalSale uint) SaleReportUpdater {
	u.fields[string(SaleReportDBSchema.TotalSale)] = totalSale
	return u
}

// SetTotalStock is an autogenerated method
// nolint: dupl
func (u SaleReportUpdater) SetTotalStock(totalStock uint) SaleReportUpdater {
	u.fields[string(SaleReportDBSchema.TotalStock)] = totalStock
	return u
}

// ToDateEq is an autogenerated method
// nolint: dupl
func (qs SaleReportQuerySet) ToDateEq(toDate time.Time) SaleReportQuerySet {
	return qs.w(qs.db.Where("to_date = ?", toDate))
}

// ToDateGt is an autogenerated method
// nolint: dupl
func (qs SaleReportQuerySet) ToDateGt(toDate time.Time) SaleReportQuerySet {
	return qs.w(qs.db.Where("to_date > ?", toDate))
}

// ToDateGte is an autogenerated method
// nolint: dupl
func (qs SaleReportQuerySet) ToDateGte(toDate time.Time) SaleReportQuerySet {
	return qs.w(qs.db.Where("to_date >= ?", toDate))
}

// ToDateIsNotNull is an autogenerated method
// nolint: dupl
func (qs SaleReportQuerySet) ToDateIsNotNull() SaleReportQuerySet {
	return qs.w(qs.db.Where("to_date IS NOT NULL"))
}

// ToDateIsNull is an autogenerated method
// nolint: dupl
func (qs SaleReportQuerySet) ToDateIsNull() SaleReportQuerySet {
	return qs.w(qs.db.Where("to_date IS NULL"))
}

// ToDateLt is an autogenerated method
// nolint: dupl
func (qs SaleReportQuerySet) ToDateLt(toDate time.Time) SaleReportQuerySet {
	return qs.w(qs.db.Where("to_date < ?", toDate))
}

// ToDateLte is an autogenerated method
// nolint: dupl
func (qs SaleReportQuerySet) ToDateLte(toDate time.Time) SaleReportQuerySet {
	return qs.w(qs.db.Where("to_date <= ?", toDate))
}

// ToDateNe is an autogenerated method
// nolint: dupl
func (qs SaleReportQuerySet) ToDateNe(toDate time.Time) SaleReportQuerySet {
	return qs.w(qs.db.Where("to_date != ?", toDate))
}

// TotalProfitEq is an autogenerated method
// nolint: dupl
func (qs SaleReportQuerySet) TotalProfitEq(totalProfit uint) SaleReportQuerySet {
	return qs.w(qs.db.Where("total_profit = ?", totalProfit))
}

// TotalProfitGt is an autogenerated method
// nolint: dupl
func (qs SaleReportQuerySet) TotalProfitGt(totalProfit uint) SaleReportQuerySet {
	return qs.w(qs.db.Where("total_profit > ?", totalProfit))
}

// TotalProfitGte is an autogenerated method
// nolint: dupl
func (qs SaleReportQuerySet) TotalProfitGte(totalProfit uint) SaleReportQuerySet {
	return qs.w(qs.db.Where("total_profit >= ?", totalProfit))
}

// TotalProfitIn is an autogenerated method
// nolint: dupl
func (qs SaleReportQuerySet) TotalProfitIn(totalProfit uint, totalProfitRest ...uint) SaleReportQuerySet {
	iArgs := []interface{}{totalProfit}
	for _, arg := range totalProfitRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("total_profit IN (?)", iArgs))
}

// TotalProfitLt is an autogenerated method
// nolint: dupl
func (qs SaleReportQuerySet) TotalProfitLt(totalProfit uint) SaleReportQuerySet {
	return qs.w(qs.db.Where("total_profit < ?", totalProfit))
}

// TotalProfitLte is an autogenerated method
// nolint: dupl
func (qs SaleReportQuerySet) TotalProfitLte(totalProfit uint) SaleReportQuerySet {
	return qs.w(qs.db.Where("total_profit <= ?", totalProfit))
}

// TotalProfitNe is an autogenerated method
// nolint: dupl
func (qs SaleReportQuerySet) TotalProfitNe(totalProfit uint) SaleReportQuerySet {
	return qs.w(qs.db.Where("total_profit != ?", totalProfit))
}

// TotalProfitNotIn is an autogenerated method
// nolint: dupl
func (qs SaleReportQuerySet) TotalProfitNotIn(totalProfit uint, totalProfitRest ...uint) SaleReportQuerySet {
	iArgs := []interface{}{totalProfit}
	for _, arg := range totalProfitRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("total_profit NOT IN (?)", iArgs))
}

// TotalRevenueEq is an autogenerated method
// nolint: dupl
func (qs SaleReportQuerySet) TotalRevenueEq(totalRevenue uint) SaleReportQuerySet {
	return qs.w(qs.db.Where("total_revenue = ?", totalRevenue))
}

// TotalRevenueGt is an autogenerated method
// nolint: dupl
func (qs SaleReportQuerySet) TotalRevenueGt(totalRevenue uint) SaleReportQuerySet {
	return qs.w(qs.db.Where("total_revenue > ?", totalRevenue))
}

// TotalRevenueGte is an autogenerated method
// nolint: dupl
func (qs SaleReportQuerySet) TotalRevenueGte(totalRevenue uint) SaleReportQuerySet {
	return qs.w(qs.db.Where("total_revenue >= ?", totalRevenue))
}

// TotalRevenueIn is an autogenerated method
// nolint: dupl
func (qs SaleReportQuerySet) TotalRevenueIn(totalRevenue uint, totalRevenueRest ...uint) SaleReportQuerySet {
	iArgs := []interface{}{totalRevenue}
	for _, arg := range totalRevenueRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("total_revenue IN (?)", iArgs))
}

// TotalRevenueLt is an autogenerated method
// nolint: dupl
func (qs SaleReportQuerySet) TotalRevenueLt(totalRevenue uint) SaleReportQuerySet {
	return qs.w(qs.db.Where("total_revenue < ?", totalRevenue))
}

// TotalRevenueLte is an autogenerated method
// nolint: dupl
func (qs SaleReportQuerySet) TotalRevenueLte(totalRevenue uint) SaleReportQuerySet {
	return qs.w(qs.db.Where("total_revenue <= ?", totalRevenue))
}

// TotalRevenueNe is an autogenerated method
// nolint: dupl
func (qs SaleReportQuerySet) TotalRevenueNe(totalRevenue uint) SaleReportQuerySet {
	return qs.w(qs.db.Where("total_revenue != ?", totalRevenue))
}

// TotalRevenueNotIn is an autogenerated method
// nolint: dupl
func (qs SaleReportQuerySet) TotalRevenueNotIn(totalRevenue uint, totalRevenueRest ...uint) SaleReportQuerySet {
	iArgs := []interface{}{totalRevenue}
	for _, arg := range totalRevenueRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("total_revenue NOT IN (?)", iArgs))
}

// TotalSaleEq is an autogenerated method
// nolint: dupl
func (qs SaleReportQuerySet) TotalSaleEq(totalSale uint) SaleReportQuerySet {
	return qs.w(qs.db.Where("total_sale = ?", totalSale))
}

// TotalSaleGt is an autogenerated method
// nolint: dupl
func (qs SaleReportQuerySet) TotalSaleGt(totalSale uint) SaleReportQuerySet {
	return qs.w(qs.db.Where("total_sale > ?", totalSale))
}

// TotalSaleGte is an autogenerated method
// nolint: dupl
func (qs SaleReportQuerySet) TotalSaleGte(totalSale uint) SaleReportQuerySet {
	return qs.w(qs.db.Where("total_sale >= ?", totalSale))
}

// TotalSaleIn is an autogenerated method
// nolint: dupl
func (qs SaleReportQuerySet) TotalSaleIn(totalSale uint, totalSaleRest ...uint) SaleReportQuerySet {
	iArgs := []interface{}{totalSale}
	for _, arg := range totalSaleRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("total_sale IN (?)", iArgs))
}

// TotalSaleLt is an autogenerated method
// nolint: dupl
func (qs SaleReportQuerySet) TotalSaleLt(totalSale uint) SaleReportQuerySet {
	return qs.w(qs.db.Where("total_sale < ?", totalSale))
}

// TotalSaleLte is an autogenerated method
// nolint: dupl
func (qs SaleReportQuerySet) TotalSaleLte(totalSale uint) SaleReportQuerySet {
	return qs.w(qs.db.Where("total_sale <= ?", totalSale))
}

// TotalSaleNe is an autogenerated method
// nolint: dupl
func (qs SaleReportQuerySet) TotalSaleNe(totalSale uint) SaleReportQuerySet {
	return qs.w(qs.db.Where("total_sale != ?", totalSale))
}

// TotalSaleNotIn is an autogenerated method
// nolint: dupl
func (qs SaleReportQuerySet) TotalSaleNotIn(totalSale uint, totalSaleRest ...uint) SaleReportQuerySet {
	iArgs := []interface{}{totalSale}
	for _, arg := range totalSaleRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("total_sale NOT IN (?)", iArgs))
}

// TotalStockEq is an autogenerated method
// nolint: dupl
func (qs SaleReportQuerySet) TotalStockEq(totalStock uint) SaleReportQuerySet {
	return qs.w(qs.db.Where("total_stock = ?", totalStock))
}

// TotalStockGt is an autogenerated method
// nolint: dupl
func (qs SaleReportQuerySet) TotalStockGt(totalStock uint) SaleReportQuerySet {
	return qs.w(qs.db.Where("total_stock > ?", totalStock))
}

// TotalStockGte is an autogenerated method
// nolint: dupl
func (qs SaleReportQuerySet) TotalStockGte(totalStock uint) SaleReportQuerySet {
	return qs.w(qs.db.Where("total_stock >= ?", totalStock))
}

// TotalStockIn is an autogenerated method
// nolint: dupl
func (qs SaleReportQuerySet) TotalStockIn(totalStock uint, totalStockRest ...uint) SaleReportQuerySet {
	iArgs := []interface{}{totalStock}
	for _, arg := range totalStockRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("total_stock IN (?)", iArgs))
}

// TotalStockLt is an autogenerated method
// nolint: dupl
func (qs SaleReportQuerySet) TotalStockLt(totalStock uint) SaleReportQuerySet {
	return qs.w(qs.db.Where("total_stock < ?", totalStock))
}

// TotalStockLte is an autogenerated method
// nolint: dupl
func (qs SaleReportQuerySet) TotalStockLte(totalStock uint) SaleReportQuerySet {
	return qs.w(qs.db.Where("total_stock <= ?", totalStock))
}

// TotalStockNe is an autogenerated method
// nolint: dupl
func (qs SaleReportQuerySet) TotalStockNe(totalStock uint) SaleReportQuerySet {
	return qs.w(qs.db.Where("total_stock != ?", totalStock))
}

// TotalStockNotIn is an autogenerated method
// nolint: dupl
func (qs SaleReportQuerySet) TotalStockNotIn(totalStock uint, totalStockRest ...uint) SaleReportQuerySet {
	iArgs := []interface{}{totalStock}
	for _, arg := range totalStockRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("total_stock NOT IN (?)", iArgs))
}

// Update is an autogenerated method
// nolint: dupl
func (u SaleReportUpdater) Update() error {
	return u.db.Updates(u.fields).Error
}

// UpdateNum is an autogenerated method
// nolint: dupl
func (u SaleReportUpdater) UpdateNum() (int64, error) {
	db := u.db.Updates(u.fields)
	return db.RowsAffected, db.Error
}

// ===== END of query set SaleReportQuerySet

// ===== BEGIN of SaleReport modifiers

type saleReportDBSchemaField string

func (f saleReportDBSchemaField) String() string {
	return string(f)
}

// SaleReportDBSchema stores db field names of SaleReport
var SaleReportDBSchema = struct {
	FromDate     saleReportDBSchemaField
	ToDate       saleReportDBSchemaField
	TotalRevenue saleReportDBSchemaField
	TotalProfit  saleReportDBSchemaField
	TotalSale    saleReportDBSchemaField
	TotalStock   saleReportDBSchemaField
}{

	FromDate:     saleReportDBSchemaField("from_date"),
	ToDate:       saleReportDBSchemaField("to_date"),
	TotalRevenue: saleReportDBSchemaField("total_revenue"),
	TotalProfit:  saleReportDBSchemaField("total_profit"),
	TotalSale:    saleReportDBSchemaField("total_sale"),
	TotalStock:   saleReportDBSchemaField("total_stock"),
}

// Update updates SaleReport fields by primary key
func (o *SaleReport) Update(db *gorm.DB, fields ...saleReportDBSchemaField) error {
	dbNameToFieldName := map[string]interface{}{
		"from_date":     o.FromDate,
		"to_date":       o.ToDate,
		"total_revenue": o.TotalRevenue,
		"total_profit":  o.TotalProfit,
		"total_sale":    o.TotalSale,
		"total_stock":   o.TotalStock,
	}
	u := map[string]interface{}{}
	for _, f := range fields {
		fs := f.String()
		u[fs] = dbNameToFieldName[fs]
	}
	if err := db.Model(o).Updates(u).Error; err != nil {
		if err == gorm.ErrRecordNotFound {
			return err
		}

		return fmt.Errorf("can't update SaleReport %v fields %v: %s",
			o, fields, err)
	}

	return nil
}

// SaleReportUpdater is an SaleReport updates manager
type SaleReportUpdater struct {
	fields map[string]interface{}
	db     *gorm.DB
}

// NewSaleReportUpdater creates new SaleReport updater
func NewSaleReportUpdater(db *gorm.DB) SaleReportUpdater {
	return SaleReportUpdater{
		fields: map[string]interface{}{},
		db:     db.Model(&SaleReport{}),
	}
}

// ===== END of SaleReport modifiers

// ===== END of all query sets
